import { createClient } from "@supabase/supabase-js"

// Obtener variables de entorno con validaci√≥n
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!

// Debug: Mostrar informaci√≥n de conexi√≥n
console.log("üîß Configuraci√≥n de Supabase:")
console.log("URL:", supabaseUrl)
console.log("Key disponible:", supabaseAnonKey ? "‚úÖ S√≠" : "‚ùå No")

// Crear cliente de Supabase
export const supabase = createClient(supabaseUrl, supabaseAnonKey)

// Funci√≥n para probar la conexi√≥n
export async function testSupabaseConnection() {
  try {
    console.log("üîç Probando conexi√≥n a Supabase...")

    const { data, error } = await supabase.from("users").select("count").limit(1)

    if (error) {
      console.error("‚ùå Error de conexi√≥n:", error)
      return { success: false, error: error.message }
    }

    console.log("‚úÖ Conexi√≥n exitosa a Supabase")
    return { success: true, data }
  } catch (error) {
    console.error("‚ùå Error al probar conexi√≥n:", error)
    return { success: false, error: error instanceof Error ? error.message : "Error desconocido" }
  }
}

// Funci√≥n para obtener el cliente de Supabase
export function getSupabaseClient() {
  return supabase
}
